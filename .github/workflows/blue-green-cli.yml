# This workflow will build a Java project with Maven, and deploy on ASA using blue/green release support
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CD, Build & deploy using cli

on:
  workflow_dispatch:

env:
  
  ASC_PACKAGE_PATH: ${{ github.workspace }}
  
  AZURE_RESOURCE_GROUP_NAME: 'asa_springlabs_rg'
  SPRING_APPS_SERVICE: 'springappssvc5e4b10'
  AZURE_LOCATION: 'eastus'

  APP_NAME: api-gateway
  APP_NAME_JAR_PATH: spring-petclinic-api-gateway/target
  APP_JAR_NAME: spring-petclinic-api-gateway-2.6.11.jar
 
  DEFAULT_DEPLOYMENT: default
  NEW_DEPLOYMENT: staging
  ENVIRONMENT: Production

  AZURE_CRED: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout GitHub Actions 
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: maven build, clean
        run: |
          mvn -B package -DskipTests -Denv=cloud
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-files
          path: ${{ env.ASC_PACKAGE_PATH }}/${{ env.APP_NAME_JAR_PATH }}/${{ env.APP_JAR_NAME }}

      
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      NEWDEPLOYMENT: ${{ steps.deploy.outputs.NEWDEPLOYMENT }}
      ACTIVEDEPLOYMENT: ${{ steps.deploy.outputs.ACTIVEDEPLOYMENT }}
   
    steps:
      - name: Download jar
        uses: actions/download-artifact@v3
        with:
          name: jar-files      

      - name: Login via Azure CLI
        uses: azure/login@v1.1
        with:
          creds: ${{ env.AZURE_CRED }}

      - name: deploy to staging  with cli
        uses: azure/CLI@v1
        id: deploy
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name spring
            ACTIVEDEPLOYMENT=$(az spring app show -n ${{env.APP_NAME}} -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} --query properties.activeDeployment.name -o tsv)
            if [ "$ACTIVEDEPLOYMENT" = "${{env.DEFAULT_DEPLOYMENT}}" ]; then
              NEWDEPLOYMENT="${{env.NEW_DEPLOYMENT}}"
            else
              NEWDEPLOYMENT="${{env.DEFAULT_DEPLOYMENT}}"
            fi
            echo 'new deployment: ' $NEWDEPLOYMENT
            echo 'active deployment': $ACTIVEDEPLOYMENT
            NEWDEPLOYMENTEXISTS=$(az spring app deployment list --app ${{env.APP_NAME}} -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} --query "[?name=='$NEWDEPLOYMENT'].name" -o tsv)
            if [ "$NEWDEPLOYMENTEXISTS" = "$NEWDEPLOYMENT" ]; then
              echo $NEWDEPLOYMENT ' already exists'
            else
              echo 'creating deployment ' $NEWDEPLOYMENT
              az spring app deployment create --app ${{env.APP_NAME}} -n $NEWDEPLOYMENT -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }}
            fi
            az spring app deploy -n ${{env.APP_NAME}} -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} --artifact-path ${{ env.ASC_PACKAGE_PATH }}/${{ env.APP_JAR_NAME }} -d $NEWDEPLOYMENT
      - name: Log out from Azure
        id: azure_logout
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            az logout
   
  switch-active:
    runs-on: ubuntu-latest
    needs: deploy-staging
   
    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1.1
        with:
          creds: ${{ env.AZURE_CRED }}

      - name: smoke test staging deployment
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            echo "I should execute some smoke test against staging before automatically promote it as production"


      - name: switch active deployment and delete old one
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az extension add --name spring
            az spring app set-deployment -d ${{ needs.deploy-staging.outputs.NEWDEPLOYMENT }} -n ${{env.APP_NAME}} -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }}
            az spring app deployment delete --app ${{env.APP_NAME}} -n ${{ needs.deploy-staging.outputs.ACTIVEDEPLOYMENT }} -s ${{ env.SPRING_APPS_SERVICE }}  -g ${{ env.AZURE_RESOURCE_GROUP_NAME }}
            # Log out from Azure

      - name: Log out from Azure
        id: azure_logout
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            az logout
